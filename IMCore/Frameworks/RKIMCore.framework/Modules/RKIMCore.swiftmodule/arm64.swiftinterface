// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name RKIMCore
import AVFoundation
import Alamofire
import CommonCrypto
import Foundation
import Moya
import RKIHandyJSON
import RKILogger
@_exported import RKIMCore
import RKIUtils
import RKSocket
import Swift
import UIKit
import WCDBSwift
import _Concurrency
@_inheritsConvenienceInitializers public class RKIMProvider : Moya.MoyaProvider<RKIMCore.RMIMHttpEnum> {
  public func requestCombine(_ target: RKIMCore.RMIMHttpEnum, _ completion: @escaping RKIMCore.RKResult) -> Moya.Cancellable
  override public func request(_ target: RKIMCore.RMIMHttpEnum, callbackQueue: Dispatch.DispatchQueue? = .none, progress: Moya.ProgressBlock? = .none, completion: @escaping Moya.Completion) -> Moya.Cancellable
  override public init(endpointClosure: @escaping Moya.MoyaProvider<RKIMCore.RMIMHttpEnum>.EndpointClosure = super, requestClosure: @escaping Moya.MoyaProvider<RKIMCore.RMIMHttpEnum>.RequestClosure = super, stubClosure: @escaping Moya.MoyaProvider<RKIMCore.RMIMHttpEnum>.StubClosure = super, callbackQueue: Dispatch.DispatchQueue? = nil, session: Moya.Session = super, plugins: [Moya.PluginType] = super, trackInflights: Swift.Bool = super)
  @objc deinit
}
public var RKIMAPI: RKIMCore.RKIMProvider
public enum RMIMHttpEnum {
  case userList(keyword: Swift.String?)
  case groupList(keyword: Swift.String?)
  case selectUserList(groupId: Swift.String?)
  case createGroup(groupName: Swift.String?, ownerId: Swift.String?, ownerJoinFlag: Swift.Bool?, groupConfig: Swift.String?, userList: [Swift.String]?)
  case addUserInGroup(groupId: Swift.String?, userList: [Swift.String]?)
  case removeUser(groupId: Swift.String?, userList: [Swift.String]?)
  case dismissGroup(groupId: Swift.String?)
  case uploadFile(file: Foundation.Data?, fileName: Swift.String)
  case uploadCompressFile(file: Foundation.Data?, isImage: Swift.Bool, compress: Swift.Float = 0.5)
  case historyMsgsearch(receiveGroup: Swift.String, pageIndex: Swift.Int, pageSize: Swift.Int, messageDetail: Swift.String?, messageType: Swift.String?, sendTimeLongStart: Swift.String?, sendTimeLongEnd: Swift.String?)
  case sendMsg(reciever: Swift.String?, receiveGroup: Swift.String?, messageType: Swift.String?, messageDetail: Swift.String?)
  case historyMsg(reciever: Swift.String?, receiveGroup: Swift.String?, pageSize: Swift.String?, pageIndex: Swift.String?, sendTimeLongEnd: Swift.String?)
  case updateMsgRecordTime(groupOrFriendId: Swift.String!)
  case messageReadUsersInfo(groupId: Swift.String, messageID: Swift.String)
  case updateGroupInfo(groupId: Swift.String, ownerId: Swift.String?, groupName: Swift.String?, groupConfig: Swift.String?)
}
extension RKIMCore.RMIMHttpEnum : Moya.TargetType {
  public var describeString: Swift.String {
    get
  }
  public var sampleData: Foundation.Data {
    get
  }
  public var baseURL: Foundation.URL {
    get
  }
  public var path: Swift.String {
    get
  }
  public var method: Moya.Method {
    get
  }
  public var task: Moya.Task {
    get
  }
  public var headers: [Swift.String : Swift.String]? {
    get
  }
}
public typealias RKResult = (_ isSuccess: Swift.Bool, _ errorMessage: Swift.String?, _ result: Any?) -> Swift.Void
@objc public protocol RKIMDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func message(didReceiveNormalMessage message: RKIMCore.RKIMMessage)
  @objc optional func message(didReceiveSystemMessage message: RKIMCore.RKIMMessage)
  @objc optional func didOpen()
  @objc optional func didFail(WithError error: Swift.Error)
  @objc optional func didClose(code: Swift.Int, reason: Swift.String?)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKIMManager : ObjectiveC.NSObject, RKIMCore.IMCoreProtocl {
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class RKIMConfig : ObjectiveC.NSObject {
  @objc public init(socketURL: Swift.String, httpURL: Swift.String)
  @objc deinit
}
@objc public protocol IMCoreProtocl : ObjectiveC.NSObjectProtocol {
  @objc static var share: RKIMCore.RKIMManager! { get }
  @objc func config(config: RKIMCore.RKIMConfig)
  @objc func login(token: Swift.String, uid: Swift.String)
  @objc func login()
  @objc func logout()
  @objc func addDelegate(newDelegate: RKIMCore.RKIMDelegate)
  @objc func removeFromArray(delegate: RKIMCore.RKIMDelegate)
  @objc func contactList(compelet: @escaping (_ isSuccess: Swift.Bool, _ errorMessage: Swift.String?, _ result: [RKIMCore.RKIMUser]?) -> Swift.Void)
  @objc func groupList(compelet: @escaping (_ isSuccess: Swift.Bool, _ errorMessage: Swift.String?, _ result: [RKIMCore.RKIMGroup]?) -> Swift.Void)
  @objc func groupMemberList(groupID: Swift.String, compelet: @escaping (_ isSuccess: Swift.Bool, _ errorMessage: Swift.String?, _ result: [RKIMCore.RKIMUser]?) -> Swift.Void)
  @objc func createGroup(groupName name: Swift.String, ownerId: Swift.String?, ownerJoinFlag: Swift.Bool, groupConfig: Swift.String?, userList users: [Swift.String], compelet: @escaping RKIMCore.RKResult)
  @objc func addGroupUsers(groupId: Swift.String, userList users: [Swift.String], compelet: @escaping RKIMCore.RKResult)
  @objc func rmoveGroupUsers(groupId: Swift.String, userList users: [Swift.String], compelet: @escaping RKIMCore.RKResult)
  @objc func dissolveGroup(groupId: Swift.String, compelet: @escaping RKIMCore.RKResult)
  @objc func updateGroupInfo(groupId: Swift.String, ownerId: Swift.String?, groupName: Swift.String?, groupConfig: Swift.String?, compelet: @escaping RKIMCore.RKResult)
  @objc func createTextMessage(reciever: Swift.String?, receiveGroup: Swift.String?, text: Swift.String) -> RKIMCore.RKIMMessage?
  @objc func createImageMessage(reciever: Swift.String?, receiveGroup: Swift.String?, image: UIKit.UIImage) -> RKIMCore.RKIMMessage?
  @objc func createVideoMessage(reciever: Swift.String?, receiveGroup: Swift.String?, data: Foundation.Data) -> RKIMCore.RKIMMessage?
  @objc func createVoiceMessage(reciever: Swift.String?, receiveGroup: Swift.String?, data: Foundation.Data, duration: Swift.Int) -> RKIMCore.RKIMMessage?
  @objc func sendMessage(_ message: RKIMCore.RKIMMessage?, compelet: @escaping RKIMCore.RKResult)
  @objc func sendMessage(_ message: RKIMCore.RKIMMessage?, progressBlock: @escaping (_ percent: Swift.Float) -> Swift.Void, compelet: @escaping RKIMCore.RKResult)
  @objc func historyMessage(reciever: Swift.String?, receiveGroup: Swift.String?, pageSize: Swift.String?, pageIndex: Swift.String?, sendTimeLongEnd: Swift.String?, compelet: @escaping (Swift.Bool, Swift.String?, [RKIMCore.RKIMMessage]?) -> Swift.Void)
  @objc func searchHistoryMessage(recieverGroup: Swift.String, messageInfo: Swift.String?, messageType: Swift.Int, pageIndex: Swift.Int, pageSize: Swift.Int, sendTimeLongStart: Swift.String?, sendTimeLongEnd: Swift.String?, compelet: @escaping (Swift.Bool, Swift.String?, [RKIMCore.RKIMMessage]?) -> Swift.Void)
  @objc func missedMessage(recieverGroup: Swift.String, messageStart: Swift.Double, compelet: @escaping (Swift.Bool, Swift.String?, [RKIMCore.RKIMMessage]?) -> Swift.Void)
  @objc func updateMessageRecordTime(groupId: Swift.String, compelet: @escaping RKIMCore.RKResult)
  @objc func uploadCompressFile(file: Foundation.Data, isImage: Swift.Bool, compress: Swift.Float, callbackQueue: Dispatch.DispatchQueue?, progressBlock: @escaping (Swift.Double) -> Swift.Void, completion: @escaping RKIMCore.RKResult)
  @objc func uploadFile(file: Foundation.Data, fileName: Swift.String, progressBlock: @escaping (Swift.Double) -> Swift.Void, completion: @escaping RKIMCore.RKResult)
  @objc func messageUserReadList(groupId: Swift.String, messageId: Swift.String, completion: @escaping RKIMCore.RKResult)
}
public enum MessageContentType : Swift.String, RKIHandyJSON.HandyJSONEnum {
  case Text
  case Image
  case Video
  case Voice
  case File
  case system
  case unread
  case Unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SystemMessageType : Swift.Int, RKIHandyJSON.HandyJSONEnum {
  case NewGroup
  case InvitGroup
  case RmoveGroup
  case dissolvenGroup
  case LogOut
  case updateGroup
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum messageSateType : Swift.Int32 {
  case fail
  case success
  case transfering
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class RKMessageDetail : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  public var content: Swift.String?
  public var imgUrl: Swift.String?
  public var thumbUrl: Swift.String?
  public var imgWidth: Swift.String?
  public var imgHeight: Swift.String?
  public var videoUrl: Swift.String?
  public var duration: Swift.String?
  public var videoWidth: Swift.String?
  public var videoHeight: Swift.String?
  public var voiceUrl: Swift.String?
  public var fileUrl: Swift.String?
  public var fileName: Swift.String?
  public var fileSize: Swift.String?
  public var localTms: Swift.String?
  public var systemType: RKIMCore.SystemMessageType?
  public func mapping(mapper: RKIHandyJSON.HelpingMapper)
  @objc override required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RKIMMessage : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON, WCDBSwift.TableCodable {
  public var uid: Swift.String
  public var messageType: RKIMCore.MessageContentType?
  public var messageDetailModel: RKIMCore.RKMessageDetail? {
    get
  }
  public var sendTimeLong: Swift.Double
  public var id: Swift.String
  public var sender: Swift.String
  public var senderName: Swift.String
  public var senderAvator: Swift.String
  public var status: RKIMCore.messageSateType?
  public var reciever: Swift.String
  public var receiveGroup: Swift.String
  public var unread: Swift.Int?
  public var fileName: Swift.String?
  public func filePath() -> Swift.String
  public func mapping(mapper: RKIHandyJSON.HelpingMapper)
  public enum directionType {
    case send
    case receive
    case unknown
    public static func == (a: RKIMCore.RKIMMessage.directionType, b: RKIMCore.RKIMMessage.directionType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var direction: RKIMCore.RKIMMessage.directionType {
    get
  }
  public var progess: Swift.Float
  public var chatTime: Swift.String {
    get
  }
  public func jsonString() -> Swift.String?
  @objc override required dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension RKIMCore.MessageContentType : WCDBSwift.ColumnCodable {
  public init?(with value: WCDBSwift.FundamentalValue)
  public func archivedValue() -> WCDBSwift.FundamentalValue
  public static var columnType: WCDBSwift.ColumnType {
    get
  }
}
extension RKIMCore.messageSateType : WCDBSwift.ColumnCodable {
  public init?(with value: WCDBSwift.FundamentalValue)
  public func archivedValue() -> WCDBSwift.FundamentalValue
  public static var columnType: WCDBSwift.ColumnType {
    get
  }
}
extension RKIMCore.RKIMMessage : WCDBSwift.ColumnJSONCodable {
  public enum CodingKeys : Swift.String, WCDBSwift.CodingTableKey {
    public typealias Root = RKIMCore.RKIMMessage
    public static var objectRelationalMapping: WCDBSwift.TableBinding<RKIMCore.RKIMMessage.CodingKeys>
    case messageDetail
    case sendTimeLong
    case sender
    case id
    case reciever
    case messageType
    case status
    case fileName
    case receiveGroup
    case uid
    case unread
    public static var columnConstraintBindings: [RKIMCore.RKIMMessage.CodingKeys : WCDBSwift.ColumnConstraintBinding]? {
      get
    }
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
extension RKIMCore.RKIMUser : WCDBSwift.ColumnJSONCodable {
  public enum CodingKeys : Swift.String, WCDBSwift.CodingTableKey {
    public typealias Root = RKIMCore.RKIMUser
    public static var objectRelationalMapping: WCDBSwift.TableBinding<RKIMCore.RKIMUser.CodingKeys>
    case userId
    case username
    case realName
    case headPortrait
    case uid
    public static var columnConstraintBindings: [RKIMCore.RKIMUser.CodingKeys : WCDBSwift.ColumnConstraintBinding]? {
      get
    }
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
extension RKIMCore.RKIMGroup : WCDBSwift.ColumnJSONCodable {
  public enum CodingKeys : Swift.String, WCDBSwift.CodingTableKey {
    public typealias Root = RKIMCore.RKIMGroup
    public static var objectRelationalMapping: WCDBSwift.TableBinding<RKIMCore.RKIMGroup.CodingKeys>
    case groupName
    case userList
    case groupId
    case lastMessage
    case uid
    case groupAvatars
    case ownerId
    case groupConfig
    public static var columnConstraintBindings: [RKIMCore.RKIMGroup.CodingKeys : WCDBSwift.ColumnConstraintBinding]? {
      get
    }
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
public protocol ImSocketDelegate : ObjectiveC.NSObjectProtocol {
  func rkwebSocket(didReceiveMessageWith string: Swift.String)
  func rkwebSocketDidOpen()
  func rkwebSocket(didFailWithError error: Swift.Error)
  func rkwebSocket(didCloseWithCode code: Swift.Int, reason: Swift.String?, wasClean: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers open class RKIMSocketManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension RKIMCore.RKIMSocketManager : RKSocket.RKSocketDelegate {
  public func rkwebSocket(_ webSocket: RKSocket.RKSocket, didFailWithError error: Swift.Error)
  public func rkwebSocketDidOpen(_ webSocket: RKSocket.RKSocket)
  public func rkwebSocket(_ webSocket: RKSocket.RKSocket, didCloseWithCode code: Swift.Int, reason: Swift.String?, wasClean: Swift.Bool)
  public func rkwebSocket(_ webSocket: RKSocket.RKSocket, didReceiveMessage message: Any)
  public func rkwebSocket(_ webSocket: RKSocket.RKSocket, didReceiveMessageWith data: Foundation.Data)
  public func rkwebSocket(_ webSocket: RKSocket.RKSocket, didReceiveMessageWith string: Swift.String)
  public func rkwebSocket(_ webSocket: RKSocket.RKSocket, didReceivePingWith data: Foundation.Data?)
  public func rkwebSocket(_ webSocket: RKSocket.RKSocket, didReceivePong pongData: Foundation.Data?)
}
@_hasMissingDesignatedInitializers public class RKIMDBManager {
  public static var database: WCDBSwift.Database
  public class func db() -> WCDBSwift.Database
  public class func className(_ aclsss: Swift.AnyClass) -> Swift.String
  public class func dbAddObjects<Root>(_ model: [Root]) where Root : WCDBSwift.TableDecodable, Root : WCDBSwift.TableEncodable
  public class func queryObjects<T>(_ class: T.Type, where condition: WCDBSwift.Condition? = nil, limit limitInt: Swift.Int? = nil, offset offsetInt: Swift.Int? = nil, orderBy orderList: [WCDBSwift.OrderBy]? = nil, _ compelet: @escaping ([T]) -> Swift.Void) where T : WCDBSwift.TableDecodable, T : WCDBSwift.TableEncodable
  public class func initDB()
  @objc deinit
}
extension RKIMCore.RKIMManager {
  @objc public static var share: RKIMCore.RKIMManager! {
    @objc get
  }
  @objc dynamic public func config(config: RKIMCore.RKIMConfig)
  @objc dynamic public func login(token: Swift.String, uid: Swift.String)
  @objc dynamic open func addDelegate(newDelegate: RKIMCore.RKIMDelegate)
  @objc dynamic open func removeFromArray(delegate: RKIMCore.RKIMDelegate)
  @objc dynamic open func login()
  @objc dynamic open func logout()
  @objc dynamic open func sendBeat()
  @objc dynamic open func contactList(compelet: @escaping (Swift.Bool, Swift.String?, [RKIMCore.RKIMUser]?) -> Swift.Void)
  @objc dynamic open func groupList(compelet: @escaping (_ isSuccess: Swift.Bool, _ errorMessage: Swift.String?, _ result: [RKIMCore.RKIMGroup]?) -> Swift.Void)
  @objc dynamic open func groupMemberList(groupID: Swift.String, compelet: @escaping (_ isSuccess: Swift.Bool, _ errorMessage: Swift.String?, _ result: [RKIMCore.RKIMUser]?) -> Swift.Void)
  @objc dynamic open func createGroup(groupName name: Swift.String, ownerId: Swift.String? = nil, ownerJoinFlag: Swift.Bool = true, groupConfig: Swift.String? = nil, userList users: [Swift.String], compelet: @escaping RKIMCore.RKResult)
  @objc dynamic open func addGroupUsers(groupId: Swift.String, userList users: [Swift.String], compelet: @escaping RKIMCore.RKResult)
  @objc dynamic open func rmoveGroupUsers(groupId: Swift.String, userList users: [Swift.String], compelet: @escaping RKIMCore.RKResult)
  @objc dynamic open func dissolveGroup(groupId: Swift.String, compelet: @escaping RKIMCore.RKResult)
  @objc dynamic open func updateGroupInfo(groupId: Swift.String, ownerId: Swift.String? = nil, groupName: Swift.String? = nil, groupConfig: Swift.String? = nil, compelet: @escaping RKIMCore.RKResult)
  @objc dynamic open func createTextMessage(reciever: Swift.String?, receiveGroup: Swift.String?, text: Swift.String) -> RKIMCore.RKIMMessage?
  @objc dynamic open func createImageMessage(reciever: Swift.String?, receiveGroup: Swift.String?, image: UIKit.UIImage) -> RKIMCore.RKIMMessage?
  @objc dynamic open func createVideoMessage(reciever: Swift.String?, receiveGroup: Swift.String?, data: Foundation.Data) -> RKIMCore.RKIMMessage?
  @objc dynamic open func createVoiceMessage(reciever: Swift.String?, receiveGroup: Swift.String?, data: Foundation.Data, duration: Swift.Int) -> RKIMCore.RKIMMessage?
  @objc dynamic public func sendMessage(_ message: RKIMCore.RKIMMessage?, compelet: @escaping RKIMCore.RKResult)
  @objc dynamic open func sendMessage(_ message: RKIMCore.RKIMMessage?, progressBlock: @escaping (_ percent: Swift.Float) -> Swift.Void, compelet: @escaping RKIMCore.RKResult)
  @objc dynamic open func sendMessage(reciever: Swift.String?, receiveGroup: Swift.String?, messageType: Swift.String?, messageDetail: Swift.String?, compelet: @escaping RKIMCore.RKResult)
  @objc dynamic open func historyMessage(reciever: Swift.String?, receiveGroup: Swift.String?, pageSize: Swift.String?, pageIndex: Swift.String?, sendTimeLongEnd: Swift.String?, compelet: @escaping (Swift.Bool, Swift.String?, [RKIMCore.RKIMMessage]?) -> Swift.Void)
  @objc dynamic open func searchHistoryMessage(recieverGroup: Swift.String, messageInfo: Swift.String?, messageType: Swift.Int, pageIndex: Swift.Int, pageSize: Swift.Int, sendTimeLongStart: Swift.String?, sendTimeLongEnd: Swift.String?, compelet: @escaping (Swift.Bool, Swift.String?, [RKIMCore.RKIMMessage]?) -> Swift.Void)
  @objc dynamic open func missedMessage(recieverGroup: Swift.String, messageStart: Swift.Double, compelet: @escaping (Swift.Bool, Swift.String?, [RKIMCore.RKIMMessage]?) -> Swift.Void)
  @objc dynamic open func updateMessageRecordTime(groupId: Swift.String, compelet: @escaping RKIMCore.RKResult)
  @objc dynamic open func uploadFile(file: Foundation.Data, fileName: Swift.String, progressBlock: @escaping (Swift.Double) -> Swift.Void, completion: @escaping RKIMCore.RKResult)
  @objc dynamic open func uploadCompressFile(file: Foundation.Data, isImage: Swift.Bool, compress: Swift.Float, callbackQueue: Dispatch.DispatchQueue? = .none, progressBlock: @escaping (Swift.Double) -> Swift.Void, completion: @escaping RKIMCore.RKResult)
  @objc dynamic open func messageUserReadList(groupId: Swift.String, messageId: Swift.String, completion: @escaping RKIMCore.RKResult)
}
extension RKIMCore.RKIMManager : RKIMCore.ImSocketDelegate {
  @objc dynamic public func rkwebSocketDidOpen()
  @objc dynamic public func rkwebSocket(didFailWithError error: Swift.Error)
  @objc dynamic public func rkwebSocket(didCloseWithCode code: Swift.Int, reason: Swift.String?, wasClean: Swift.Bool)
  @objc dynamic public func rkwebSocket(didReceiveMessageWith string: Swift.String)
}
@_hasMissingDesignatedInitializers public class IMResponse {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKIMUser : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON, WCDBSwift.TableCodable {
  @objc public var userId: Swift.String
  @objc public var username: Swift.String
  @objc public var realName: Swift.String
  @objc public var postName: Swift.String
  @objc public var companyName: Swift.String
  @objc public var headPortrait: Swift.String
  @objc public var unitName: Swift.String
  @objc public var selected: Swift.Bool
  @objc public var isSelf: Swift.Bool {
    @objc get
  }
  public func mapping(mapper: RKIHandyJSON.HelpingMapper)
  @objc override required dynamic public init()
  @objc public func jsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKUserCenter : ObjectiveC.NSObject {
  public class func userConCondition() -> WCDBSwift.Expression
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKIMGroup : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON, WCDBSwift.TableCodable {
  @objc public var groupName: Swift.String
  @objc public var userList: [RKIMCore.RKIMUser]
  @objc public var totalAccountNum: Swift.Int {
    @objc get
  }
  @objc public var groupId: Swift.String
  @objc public var lastMessage: RKIMCore.RKIMMessage?
  @objc public var tms: Swift.Int
  @objc public var unReadCount: Swift.Int
  @objc public var groupAvatars: Swift.String?
  @objc public var ownerId: Swift.String?
  @objc public var uid: Swift.String
  @objc public var groupConfig: Swift.String
  @objc override required dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
