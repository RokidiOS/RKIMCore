// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef RKIMCORE_SWIFT_H
#define RKIMCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="RKIMCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, ChatType, open) {
/// 单人聊
  ChatTypeSingleGroup = 1,
/// 群聊
  ChatTypeNormalGroup = 2,
/// all
  ChatTypeAll = 0,
};

@class RKIMManager;
@class RKIMConfig;
@class NSString;
@protocol RKIMDelegate;
@class RKIMUser;
@class RKIMGroup;
@class RKIMMessage;
@class UIImage;
@class NSData;

SWIFT_PROTOCOL("_TtP8RKIMCore13IMCoreProtocl_")
@protocol IMCoreProtocl <NSObject>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKIMManager * _Null_unspecified share;)
+ (RKIMManager * _Null_unspecified)share SWIFT_WARN_UNUSED_RESULT;
/// 配置im config
- (void)configWithConfig:(RKIMConfig * _Nonnull)config;
/// 配置token uid 并且登录
- (void)loginWithToken:(NSString * _Nonnull)token uid:(NSString * _Nonnull)uid;
/// 有配置token 和uid时 也可以主动调用登录接口
- (void)login;
/// 退出登录，并清除token 和uid
- (void)logout;
/// 增加im 回调 无需移除 此处为弱引用
- (void)addDelegateWithNewDelegate:(id <RKIMDelegate> _Nonnull)newDelegate;
/// 移除im 回调
- (void)removeFromArrayWithDelegate:(id <RKIMDelegate> _Nonnull)delegate;
/// 获取联系人列表
- (void)contactListWithCompelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, NSArray<RKIMUser *> * _Nullable))compelet;
/// 获取群组列表
- (void)groupListWithCompelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, NSArray<RKIMGroup *> * _Nullable))compelet;
/// 按照类型获取聊天列表
- (void)groupListWithGroupType:(enum ChatType)groupType compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, NSArray<RKIMGroup *> * _Nullable))compelet;
/// 获取群组用户列表
- (void)groupMemberListWithGroupID:(NSString * _Nonnull)groupID compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, NSArray<RKIMUser *> * _Nullable))compelet;
/// 创建群组
- (void)createGroupWithGroupName:(NSString * _Nonnull)name ownerId:(NSString * _Nullable)ownerId ownerJoinFlag:(BOOL)ownerJoinFlag groupConfig:(NSString * _Nullable)groupConfig userList:(NSArray<NSString *> * _Nonnull)users compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))compelet;
/// 拉人入群
- (void)addGroupUsersWithGroupId:(NSString * _Nonnull)groupId userList:(NSArray<NSString *> * _Nonnull)users compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))compelet;
/// 移除用户出群
- (void)rmoveGroupUsersWithGroupId:(NSString * _Nonnull)groupId userList:(NSArray<NSString *> * _Nonnull)users compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))compelet;
/// 解散群组
- (void)dissolveGroupWithGroupId:(NSString * _Nonnull)groupId compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))compelet;
/// 修改群信息
- (void)updateGroupInfoWithGroupId:(NSString * _Nonnull)groupId ownerId:(NSString * _Nullable)ownerId groupName:(NSString * _Nullable)groupName groupConfig:(NSString * _Nullable)groupConfig compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))compelet;
/// 创建单聊群组
- (void)createSingleChatGroupWithUserList:(NSString * _Nonnull)user compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))compelet;
/// 创建文本消息
- (RKIMMessage * _Nullable)createTextMessageWithReciever:(NSString * _Nullable)reciever receiveGroup:(NSString * _Nullable)receiveGroup text:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// 创建图片消息
- (RKIMMessage * _Nullable)createImageMessageWithReciever:(NSString * _Nullable)reciever receiveGroup:(NSString * _Nullable)receiveGroup image:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// 创建视频消息
- (RKIMMessage * _Nullable)createVideoMessageWithReciever:(NSString * _Nullable)reciever receiveGroup:(NSString * _Nullable)receiveGroup data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// 创建语音消息
- (RKIMMessage * _Nullable)createVoiceMessageWithReciever:(NSString * _Nullable)reciever receiveGroup:(NSString * _Nullable)receiveGroup data:(NSData * _Nonnull)data duration:(NSInteger)duration SWIFT_WARN_UNUSED_RESULT;
/// 发送消息
- (void)sendMessage:(RKIMMessage * _Nullable)message compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))compelet;
/// 发送消息 带进度回调
- (void)sendMessage:(RKIMMessage * _Nullable)message progressBlock:(void (^ _Nonnull)(float))progressBlock compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))compelet;
- (void)historyMessageWithReciever:(NSString * _Nullable)reciever receiveGroup:(NSString * _Nullable)receiveGroup pageSize:(NSString * _Nullable)pageSize pageIndex:(NSString * _Nullable)pageIndex sendTimeLongEnd:(NSString * _Nullable)sendTimeLongEnd compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, NSArray<RKIMMessage *> * _Nullable))compelet;
- (void)searchHistoryMessageWithRecieverGroup:(NSString * _Nonnull)recieverGroup messageInfo:(NSString * _Nullable)messageInfo messageType:(NSInteger)messageType pageIndex:(NSInteger)pageIndex pageSize:(NSInteger)pageSize sendTimeLongStart:(NSString * _Nullable)sendTimeLongStart sendTimeLongEnd:(NSString * _Nullable)sendTimeLongEnd compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, NSArray<RKIMMessage *> * _Nullable))compelet;
- (void)missedMessageWithRecieverGroup:(NSString * _Nonnull)recieverGroup messageStart:(double)messageStart compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, NSArray<RKIMMessage *> * _Nullable))compelet;
/// 将群内消息标记为已读
- (void)updateMessageRecordTimeWithGroupId:(NSString * _Nonnull)groupId compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))compelet;
- (void)uploadCompressFileWithFile:(NSData * _Nonnull)file isImage:(BOOL)isImage compress:(float)compress callbackQueue:(dispatch_queue_t _Nullable)callbackQueue progressBlock:(void (^ _Nonnull)(double))progressBlock completion:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))completion;
/// 通用上传文件
- (void)uploadFileWithFile:(NSData * _Nonnull)file fileName:(NSString * _Nonnull)fileName progressBlock:(void (^ _Nonnull)(double))progressBlock completion:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))completion;
- (void)messageUserReadListWithGroupId:(NSString * _Nonnull)groupId messageId:(NSString * _Nonnull)messageId completion:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))completion;
@end


/// IM 参数配置
SWIFT_CLASS("_TtC8RKIMCore10RKIMConfig")
@interface RKIMConfig : NSObject
/// http url
- (nonnull instancetype)initWithSocketURL:(NSString * _Nonnull)socketURL httpURL:(NSString * _Nonnull)httpURL OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP8RKIMCore12RKIMDelegate_")
@protocol RKIMDelegate <NSObject>
@optional
/// 收到IM普通消息
- (void)messageWithDidReceiveNormalMessage:(RKIMMessage * _Nonnull)message;
/// 收到系统消息
- (void)messageWithDidReceiveSystemMessage:(RKIMMessage * _Nonnull)message;
/// 开启成功
- (void)didOpen;
/// 开启失败
- (void)didFailWithError:(NSError * _Nonnull)error;
/// 被远端关闭 code 码 reason 原因   只要不是登出 都主动做重连
- (void)didCloseWithCode:(NSInteger)code reason:(NSString * _Nullable)reason;
@end


SWIFT_CLASS("_TtC8RKIMCore9RKIMGroup")
@interface RKIMGroup : NSObject
/// 群组名称
@property (nonatomic, copy) NSString * _Nonnull groupName;
/// 群组用户列表
@property (nonatomic, copy) NSArray<RKIMUser *> * _Nonnull userList;
/// 群总人数
@property (nonatomic, readonly) NSInteger totalAccountNum;
/// 群ID
@property (nonatomic, copy) NSString * _Nonnull groupId;
/// 群内最后一条消息
@property (nonatomic, strong) RKIMMessage * _Nullable lastMessage;
/// 时间戳
@property (nonatomic) NSInteger tms;
/// 群消息未读数
@property (nonatomic) NSInteger unReadCount;
/// 群头像
@property (nonatomic, copy) NSString * _Nullable groupAvatars;
/// /// 群主ID
@property (nonatomic, copy) NSString * _Nullable ownerId;
@property (nonatomic, copy) NSString * _Nonnull uid;
/// 群公告
@property (nonatomic, copy) NSString * _Nonnull groupConfig;
/// 群聊类型
@property (nonatomic) enum ChatType groupType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC8RKIMCore11RKIMManager")
@interface RKIMManager : NSObject <IMCoreProtocl>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface RKIMManager (SWIFT_EXTENSION(RKIMCore))
- (void)rkwebSocketDidOpen;
- (void)rkwebSocketWithDidFailWithError:(NSError * _Nonnull)error;
- (void)rkwebSocketWithDidCloseWithCode:(NSInteger)code reason:(NSString * _Nullable)reason wasClean:(BOOL)wasClean;
- (void)rkwebSocketWithDidReceiveMessageWith:(NSString * _Nonnull)string;
@end


@interface RKIMManager (SWIFT_EXTENSION(RKIMCore))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKIMManager * _Null_unspecified share;)
+ (RKIMManager * _Null_unspecified)share SWIFT_WARN_UNUSED_RESULT;
- (void)configWithConfig:(RKIMConfig * _Nonnull)config;
- (void)loginWithToken:(NSString * _Nonnull)token uid:(NSString * _Nonnull)uid;
/// 添加IM回调代理
/// \param newDelegate 代理
///
- (void)addDelegateWithNewDelegate:(id <RKIMDelegate> _Nonnull)newDelegate;
/// 添加IM回调代理
/// \param newDelegate 代理
///
- (void)removeFromArrayWithDelegate:(id <RKIMDelegate> _Nonnull)delegate;
/// 开启链接
- (void)login;
/// 关闭连接
- (void)logout;
/// 发送心跳
- (void)sendBeat;
/// 获取联系人列表
/// \param compelet 
///
- (void)contactListWithCompelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, NSArray<RKIMUser *> * _Nullable))compelet;
/// 群聊列表
- (void)groupListWithCompelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, NSArray<RKIMGroup *> * _Nullable))compelet;
/// 按照类型获取聊天列表
- (void)groupListWithGroupType:(enum ChatType)groupType compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, NSArray<RKIMGroup *> * _Nullable))compelet;
/// 查询群组内成员信息列表
/// \param groupID 群组id
///
/// \param compelet 回调
///
- (void)groupMemberListWithGroupID:(NSString * _Nonnull)groupID compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, NSArray<RKIMUser *> * _Nullable))compelet;
/// 创建群
- (void)createGroupWithGroupName:(NSString * _Nonnull)name ownerId:(NSString * _Nullable)ownerId ownerJoinFlag:(BOOL)ownerJoinFlag groupConfig:(NSString * _Nullable)groupConfig userList:(NSArray<NSString *> * _Nonnull)users compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))compelet;
/// 拉人入群
- (void)addGroupUsersWithGroupId:(NSString * _Nonnull)groupId userList:(NSArray<NSString *> * _Nonnull)users compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))compelet;
/// 移除群成员
- (void)rmoveGroupUsersWithGroupId:(NSString * _Nonnull)groupId userList:(NSArray<NSString *> * _Nonnull)users compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))compelet;
/// 解散群
- (void)dissolveGroupWithGroupId:(NSString * _Nonnull)groupId compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))compelet;
/// 修改群信息
- (void)updateGroupInfoWithGroupId:(NSString * _Nonnull)groupId ownerId:(NSString * _Nullable)ownerId groupName:(NSString * _Nullable)groupName groupConfig:(NSString * _Nullable)groupConfig compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))compelet;
- (void)createSingleChatGroupWithUserList:(NSString * _Nonnull)user compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))compelet;
/// 创建文本消息
- (RKIMMessage * _Nullable)createTextMessageWithReciever:(NSString * _Nullable)reciever receiveGroup:(NSString * _Nullable)receiveGroup text:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// 创建图片消息
- (RKIMMessage * _Nullable)createImageMessageWithReciever:(NSString * _Nullable)reciever receiveGroup:(NSString * _Nullable)receiveGroup image:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// 创建视频消息
- (RKIMMessage * _Nullable)createVideoMessageWithReciever:(NSString * _Nullable)reciever receiveGroup:(NSString * _Nullable)receiveGroup data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// 创建语音消息
- (RKIMMessage * _Nullable)createVoiceMessageWithReciever:(NSString * _Nullable)reciever receiveGroup:(NSString * _Nullable)receiveGroup data:(NSData * _Nonnull)data duration:(NSInteger)duration SWIFT_WARN_UNUSED_RESULT;
/// 发送消息 无进度回调
- (void)sendMessage:(RKIMMessage * _Nullable)message compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))compelet;
/// 发送消息 有进度回调
- (void)sendMessage:(RKIMMessage * _Nullable)message progressBlock:(void (^ _Nonnull)(float))progressBlock compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))compelet;
/// 发送消息
- (void)sendMessageWithReciever:(NSString * _Nullable)reciever receiveGroup:(NSString * _Nullable)receiveGroup messageType:(NSString * _Nullable)messageType messageDetail:(NSString * _Nullable)messageDetail compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))compelet;
/// 获取历史消息
- (void)historyMessageWithReciever:(NSString * _Nullable)reciever receiveGroup:(NSString * _Nullable)receiveGroup pageSize:(NSString * _Nullable)pageSize pageIndex:(NSString * _Nullable)pageIndex sendTimeLongEnd:(NSString * _Nullable)sendTimeLongEnd compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, NSArray<RKIMMessage *> * _Nullable))compelet;
/// 搜索历史消息
- (void)searchHistoryMessageWithRecieverGroup:(NSString * _Nonnull)recieverGroup messageInfo:(NSString * _Nullable)messageInfo messageType:(NSInteger)messageType pageIndex:(NSInteger)pageIndex pageSize:(NSInteger)pageSize sendTimeLongStart:(NSString * _Nullable)sendTimeLongStart sendTimeLongEnd:(NSString * _Nullable)sendTimeLongEnd compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, NSArray<RKIMMessage *> * _Nullable))compelet;
/// 获取时间戳以后的消息
- (void)missedMessageWithRecieverGroup:(NSString * _Nonnull)recieverGroup messageStart:(double)messageStart compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, NSArray<RKIMMessage *> * _Nullable))compelet;
/// 更新会话已读
- (void)updateMessageRecordTimeWithGroupId:(NSString * _Nonnull)groupId compelet:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))compelet;
- (void)uploadFileWithFile:(NSData * _Nonnull)file fileName:(NSString * _Nonnull)fileName progressBlock:(void (^ _Nonnull)(double))progressBlock completion:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))completion;
- (void)uploadCompressFileWithFile:(NSData * _Nonnull)file isImage:(BOOL)isImage compress:(float)compress callbackQueue:(dispatch_queue_t _Nullable)callbackQueue progressBlock:(void (^ _Nonnull)(double))progressBlock completion:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))completion;
/// 某条信息阅读
- (void)messageUserReadListWithGroupId:(NSString * _Nonnull)groupId messageId:(NSString * _Nonnull)messageId completion:(void (^ _Nonnull)(BOOL, NSString * _Nullable, id _Nullable))completion;
@end


SWIFT_CLASS("_TtC8RKIMCore11RKIMMessage")
@interface RKIMMessage : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC8RKIMCore17RKIMSocketManager")
@interface RKIMSocketManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC8RKIMCore8RKIMUser")
@interface RKIMUser : NSObject
@property (nonatomic, copy) NSString * _Nonnull userId;
/// 用户id
@property (nonatomic, copy) NSString * _Nonnull username;
/// 用户名
@property (nonatomic, copy) NSString * _Nonnull realName;
/// 真实名字
@property (nonatomic, copy) NSString * _Nonnull postName;
/// 岗位信息
@property (nonatomic, copy) NSString * _Nonnull companyName;
/// 公司信息
@property (nonatomic, copy) NSString * _Nonnull headPortrait;
/// 头像URL
@property (nonatomic, copy) NSString * _Nonnull unitName;
/// 部门
@property (nonatomic) BOOL selected;
@property (nonatomic, readonly) BOOL isSelf;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nullable)jsonString SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC8RKIMCore15RKMessageDetail")
@interface RKMessageDetail : NSObject
/// 携带被操作者门的id列表
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8RKIMCore12RKUserCenter")
@interface RKUserCenter : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
